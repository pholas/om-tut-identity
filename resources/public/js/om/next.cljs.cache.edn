;; Analyzed by ClojureScript 1.7.170
{:use-macros {defui om.next}, :excludes #{var? key replace}, :name om.next, :imports {Console goog.debug.Console}, :requires {glog goog.log, gstring goog.string, om.next.cache om.next.cache, clojure.zip clojure.zip, p om.next.protocols, om.next.impl.parser om.next.impl.parser, goog.string goog.string, gobj goog.object, goog.object goog.object, walk clojure.walk, goog.log goog.log, util om.util, om.next.protocols om.next.protocols, om.tempid om.tempid, c om.next.cache, parser om.next.impl.parser, transit om.transit, zip clojure.zip, clojure.walk clojure.walk, om.transit om.transit, tempid om.tempid, om.util om.util, Console goog.debug.Console}, :uses nil, :defs {get-props {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 325, :column 8, :end-line 325, :end-column 17, :private true, :arglists (quote ([x]))}, :private true, :name om.next/get-props, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, tag {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 237, :column 7, :end-line 237, :end-column 10, :arglists (quote ([x class]))}, :name om.next/tag, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 10, :method-params ([x class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x class]))}, db->tree {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1051, :column 7, :end-line 1051, :end-column 15, :arglists (quote ([query data refs] [query data refs map-ident])), :doc "Given a query, some data in the default database format, and the entire\n   application state in the default database format, return the tree where all\n   ident links have been replaced with their original node values.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([query data refs] [query data refs map-ident]), :arglists ([query data refs] [query data refs map-ident]), :arglists-meta (nil nil)}}, :name om.next/db->tree, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([query data refs] [query data refs map-ident]), :arglists ([query data refs] [query data refs map-ident]), :arglists-meta (nil nil)}, :method-params ([query data refs] [query data refs map-ident]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1051, :end-line 1051, :max-fixed-arity 4, :fn-var true, :arglists ([query data refs] [query data refs map-ident]), :doc "Given a query, some data in the default database format, and the entire\n   application state in the default database format, return the tree where all\n   ident links have been replaced with their original node values."}, get-local-query-data {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 191, :column 8, :end-line 191, :end-column 28, :private true, :arglists (quote ([component]))}, :private true, :name om.next/get-local-query-data, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 28, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, t {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 380, :column 8, :end-line 380, :end-column 9, :private true, :arglists (quote ([c])), :doc "Get basis t value for when the component last read its props from\n   the global state."}, :private true, :name om.next/t, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 9, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Get basis t value for when the component last read its props from\n   the global state."}, get-next-props {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 322, :column 8, :end-line 322, :end-column 22, :private true, :arglists (quote ([x]))}, :private true, :name om.next/get-next-props, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 322, :end-line 322, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, unwrap {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 253, :column 8, :end-line 253, :end-column 14, :private true, :arglists (quote ([om-props]))}, :private true, :name om.next/unwrap, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :method-params ([om-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([om-props]))}, query {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 167, :column 4, :end-line 167, :end-column 9, :protocol om.next/IQuery, :doc "Return the component's unbound query", :arglists (quote ([this]))}, :protocol om.next/IQuery, :name om.next/query, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the component's unbound query"}, query-template {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 69, :column 8, :end-line 69, :end-column 22, :private true, :arglists (quote ([query path]))}, :private true, :name om.next/query-template, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([query path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([query path]))}, move-to-key {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 59, :column 8, :end-line 59, :end-column 19, :private true, :arglists (quote ([loc k]))}, :private true, :name om.next/move-to-key, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :method-params ([loc k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc k]))}, get-prop {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 305, :column 8, :end-line 305, :end-column 16, :private true, :arglists (quote ([c k])), :doc "PRIVATE: Do not use"}, :private true, :name om.next/get-prop, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([c k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c k])), :doc "PRIVATE: Do not use"}, ->OmProps {:protocol-inline nil, :meta {:private true, :protocols #{}, :file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :end-column 27, :column 20, :factory :positional, :line 243, :end-line 243, :arglists (quote ([props basis-t])), :skip-protocol-flag nil}, :private true, :protocols #{}, :name om.next/->OmProps, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 27, :method-params ([props basis-t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props basis-t])), :skip-protocol-flag nil}, default-merge {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1146, :column 7, :end-line 1146, :end-column 20, :arglists (quote ([reconciler state res]))}, :name om.next/default-merge, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 20, :method-params ([reconciler state res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1146, :end-line 1146, :max-fixed-arity 3, :fn-var true, :arglists (quote ([reconciler state res]))}, class-path->query {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 916, :column 7, :end-line 916, :end-column 24, :arglists (quote ([x y]))}, :name om.next/class-path->query, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 24, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 916, :end-line 916, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, ITxIntercept {:meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 707, :column 14, :end-line 707, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {tx-intercept [[c tx]]}}}, :protocol-symbol true, :name om.next/ITxIntercept, :file "resources/public/js/om/next.cljs", :end-column 26, :column 1, :line 707, :protocol-info {:methods {tx-intercept [[c tx]]}}, :info nil, :end-line 707, :impls #{}, :doc nil, :jsdoc ("@interface")}, Ident {:meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 152, :column 14, :end-line 152, :end-column 19, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {ident [[this props]]}}}, :protocol-symbol true, :name om.next/Ident, :file "resources/public/js/om/next.cljs", :end-column 19, :column 1, :line 152, :protocol-info {:methods {ident [[this props]]}}, :info nil, :end-line 152, :impls #{default}, :doc nil, :jsdoc ("@interface")}, rewrite {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1089, :column 7, :end-line 1089, :end-column 14, :arglists (quote ([paths]))}, :name om.next/rewrite, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :method-params ([paths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1089, :end-line 1089, :max-fixed-arity 1, :fn-var true, :arglists (quote ([paths]))}, get-rendered-state {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 528, :column 7, :end-line 528, :end-column 25, :arglists (quote ([component])), :doc "Get the rendered state of component. om.next/get-state always returns the\n   up-to-date state."}, :name om.next/get-rendered-state, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 25, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 528, :end-line 528, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Get the rendered state of component. om.next/get-state always returns the\n   up-to-date state."}, join-value {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 104, :column 8, :end-line 104, :end-column 18, :private true, :arglists (quote ([join]))}, :private true, :name om.next/join-value, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([join]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([join]))}, react-type {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 405, :column 7, :end-line 405, :end-column 17, :arglists (quote ([x])), :doc "Returns the component type, regardless of whether the component has been\n   mounted"}, :name om.next/react-type, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the component type, regardless of whether the component has been\n   mounted"}, merge! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1153, :column 7, :end-line 1153, :end-column 13, :arglists (quote ([reconciler delta])), :doc "Merge a state delta into the application state. Affected components managed\n   by the reconciler will re-render."}, :name om.next/merge!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :method-params ([reconciler delta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1153, :end-line 1153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reconciler delta])), :doc "Merge a state delta into the application state. Affected components managed\n   by the reconciler will re-render."}, -next-props {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 359, :column 7, :end-line 359, :end-column 18, :arglists (quote ([next-props component]))}, :name om.next/-next-props, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([next-props component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 2, :fn-var true, :arglists (quote ([next-props component]))}, gather-sends {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 716, :column 7, :end-line 716, :end-column 19, :arglists (quote ([{:keys [parser], :as env} tx remotes]))}, :name om.next/gather-sends, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :method-params ([p__20240 tx remotes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 716, :end-line 716, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [parser], :as env} tx remotes]))}, set-query! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 556, :column 7, :end-line 556, :end-column 17, :arglists (quote ([component new-query])), :doc "Change the query of a component. Will schedule a re-render."}, :name om.next/set-query!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([component new-query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 556, :end-line 556, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component new-query])), :doc "Change the query of a component. Will schedule a re-render."}, ref->any {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 904, :column 7, :end-line 904, :end-column 15, :arglists (quote ([x ref])), :doc "Get any component from the indexer that matches the ref."}, :name om.next/ref->any, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([x ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 904, :end-line 904, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ref])), :doc "Get any component from the indexer that matches the ref."}, get-component-query {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 205, :column 8, :end-line 205, :end-column 27, :private true, :arglists (quote ([c]))}, :private true, :name om.next/get-component-query, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 27, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, clear-prev-props! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 377, :column 8, :end-line 377, :end-column 25, :private true, :arglists (quote ([c]))}, :private true, :name om.next/clear-prev-props!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 377, :end-line 377, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, props {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 440, :column 7, :end-line 440, :end-column 12, :arglists (quote ([component])), :doc "Return a components props."}, :name om.next/props, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 12, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 440, :end-line 440, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Return a components props."}, -prev-props {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 351, :column 7, :end-line 351, :end-column 18, :arglists (quote ([prev-props component]))}, :name om.next/-prev-props, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([prev-props component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prev-props component]))}, get-unbound-query {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 195, :column 7, :end-line 195, :end-column 24, :arglists (quote ([component])), :doc "Return the unbound query for a component."}, :name om.next/get-unbound-query, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 24, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Return the unbound query for a component."}, update-component! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 609, :column 8, :end-line 609, :end-column 25, :private true, :arglists (quote ([c next-props]))}, :private true, :name om.next/update-component!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 25, :method-params ([c next-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 609, :end-line 609, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c next-props]))}, path {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 411, :column 8, :end-line 411, :end-column 12, :private true, :arglists (quote ([c])), :doc "Returns the component's Om data path."}, :private true, :name om.next/path, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 12, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns the component's Om data path."}, to-class {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 953, :column 7, :end-line 953, :end-column 15, :arglists (quote ([class]))}, :name om.next/to-class, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 953, :end-line 953, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class]))}, tx-intercept {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 708, :column 4, :end-line 708, :end-column 16, :protocol om.next/ITxIntercept, :doc "An optional protocol that component may implement to intercept child\n     transactions.", :arglists (quote ([c tx]))}, :protocol om.next/ITxIntercept, :name om.next/tx-intercept, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([c tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 707, :end-line 708, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c tx])), :doc "An optional protocol that component may implement to intercept child\n     transactions."}, join-entry {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 99, :column 8, :end-line 99, :end-column 18, :private true, :arglists (quote ([node]))}, :private true, :name om.next/join-entry, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, children {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 604, :column 7, :end-line 604, :end-column 15, :arglists (quote ([component])), :doc "Returns the component's children."}, :name om.next/children, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Returns the component's children."}, default-merge-ref {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1319, :column 8, :end-line 1319, :end-column 25, :private true, :arglists (quote ([_ tree ref props]))}, :private true, :name om.next/default-merge-ref, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 25, :method-params ([_ tree ref props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1319, :end-line 1319, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ tree ref props]))}, -set-state! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 170, :column 4, :end-line 170, :end-column 15, :protocol om.next/ILocalState, :doc "Set the component's local state", :arglists (quote ([this new-state]))}, :protocol om.next/ILocalState, :name om.next/-set-state!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Set the component's local state"}, iquery? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 234, :column 7, :end-line 234, :end-column 14, :arglists (quote ([x]))}, :name om.next/iquery?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, var->keyword {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 179, :column 8, :end-line 179, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name om.next/var->keyword, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, update-props! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 433, :column 8, :end-line 433, :end-column 21, :private true, :arglists (quote ([c next-props]))}, :private true, :name om.next/update-props!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 21, :method-params ([c next-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 433, :end-line 433, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c next-props]))}, nil-props {:name om.next/nil-props, :file "resources/public/js/om/next.cljs", :line 251, :column 1, :end-line 251, :end-column 25, :private true, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 251, :column 16, :end-line 251, :end-column 25, :private true}}, should-update? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 614, :column 7, :end-line 614, :end-column 21, :arglists (quote ([c next-props] [c next-props next-state])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c next-props] [c next-props next-state]), :arglists ([c next-props] [c next-props next-state]), :arglists-meta (nil nil)}}, :name om.next/should-update?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c next-props] [c next-props next-state]), :arglists ([c next-props] [c next-props next-state]), :arglists-meta (nil nil)}, :method-params ([c next-props] [c next-props next-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 614, :end-line 614, :max-fixed-arity 3, :fn-var true, :arglists ([c next-props] [c next-props next-state])}, get-ident {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 476, :column 7, :end-line 476, :end-column 16, :arglists (quote ([component])), :doc "Given a component return its ident"}, :name om.next/get-ident, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 476, :end-line 476, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Given a component return its ident"}, om-props {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 245, :column 8, :end-line 245, :end-column 16, :private true, :arglists (quote ([props basis-t]))}, :private true, :name om.next/om-props, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([props basis-t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props basis-t]))}, instrument {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 429, :column 7, :end-line 429, :end-column 17, :arglists (quote ([component]))}, :name om.next/instrument, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, om-props-basis {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 248, :column 8, :end-line 248, :end-column 22, :private true, :arglists (quote ([om-props]))}, :private true, :name om.next/om-props-basis, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([om-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([om-props]))}, var? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 175, :column 8, :end-line 175, :end-column 12, :private true, :arglists (quote ([x]))}, :private true, :name om.next/var?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, map->Reconciler {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1168, :column 12, :end-line 1168, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__20492]))}, :name om.next/map->Reconciler, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([G__20492]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 1168, :end-line 1168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20492]))}, react-key {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 400, :column 7, :end-line 400, :end-column 16, :arglists (quote ([component])), :doc "Returns the components React key."}, :name om.next/react-key, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Returns the components React key."}, set-state! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 484, :column 7, :end-line 484, :end-column 17, :arglists (quote ([component new-state])), :doc "Set the component local state of the component. Analogous to React's\n   setState."}, :name om.next/set-state!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([component new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 484, :end-line 484, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component new-state])), :doc "Set the component local state of the component. Analogous to React's\n   setState."}, default-migrate {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1329, :column 8, :end-line 1329, :end-column 23, :private true, :arglists (quote ([pure query tempids id-key]))}, :private true, :name om.next/default-migrate, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 23, :method-params ([pure query tempids id-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1329, :end-line 1329, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pure query tempids id-key]))}, tree->db {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1020, :column 7, :end-line 1020, :end-column 15, :arglists (quote ([x data] [x data merge-refs])), :doc "Given a Om component class or instance and a tree of data, use the component's\n   query to transform the tree into the default database format. All nodes that\n   can be mapped via Ident implementations wil be replaced with ident links. The\n   original node data will be moved into tables indexed by ident. If merge-ref\n   option is true, will return these tables in the result instead of as metadata.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x data] [x data merge-refs]), :arglists ([x data] [x data merge-refs]), :arglists-meta (nil nil)}}, :name om.next/tree->db, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x data] [x data merge-refs]), :arglists ([x data] [x data merge-refs]), :arglists-meta (nil nil)}, :method-params ([x data] [x data merge-refs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1020, :end-line 1020, :max-fixed-arity 3, :fn-var true, :arglists ([x data] [x data merge-refs]), :doc "Given a Om component class or instance and a tree of data, use the component's\n   query to transform the tree into the default database format. All nodes that\n   can be mapped via Ident implementations wil be replaced with ident links. The\n   original node data will be moved into tables indexed by ident. If merge-ref\n   option is true, will return these tables in the result instead of as metadata."}, from-history {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1435, :column 7, :end-line 1435, :end-column 19, :arglists (quote ([reconciler uuid])), :doc "Given a reconciler and UUID return the application state snapshost\n   from history associated with the UUID. The size of the reconciler history\n   may be configured by the :history option when constructing the reconciler."}, :name om.next/from-history, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :method-params ([reconciler uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1435, :end-line 1435, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reconciler uuid])), :doc "Given a reconciler and UUID return the application state snapshost\n   from history associated with the UUID. The size of the reconciler history\n   may be configured by the :history option when constructing the reconciler."}, default-ui->props {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1300, :column 8, :end-line 1300, :end-column 25, :private true, :arglists (quote ([{:keys [parser pathopt], :as env} c]))}, :private true, :name om.next/default-ui->props, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 25, :method-params ([p__20540 c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1300, :end-line 1300, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [parser pathopt], :as env} c]))}, to-env {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 712, :column 8, :end-line 712, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name om.next/to-env, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 712, :end-line 712, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, process-roots {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1097, :column 7, :end-line 1097, :end-column 20, :arglists (quote ([query])), :doc "A send helper for rewriting the query to remove client local keys that\n   don't need server side processing. Give a query this function will\n   return a map with two keys, :query and :rewrite. :query is the\n   actual query you should send. Upon receiving the response you should invoke\n   :rewrite on the response before invoking the send callback."}, :name om.next/process-roots, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 20, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1097, :end-line 1097, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query])), :doc "A send helper for rewriting the query to remove client local keys that\n   don't need server side processing. Give a query this function will\n   return a map with two keys, :query and :rewrite. :query is the\n   actual query you should send. Upon receiving the response you should invoke\n   :rewrite on the response before invoking the send callback."}, parent {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 389, :column 8, :end-line 389, :end-column 14, :private true, :arglists (quote ([component])), :doc "Returns the parent Om component."}, :private true, :name om.next/parent, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Returns the parent Om component."}, merge-refs {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1123, :column 8, :end-line 1123, :end-column 18, :private true, :arglists (quote ([tree config refs]))}, :private true, :name om.next/merge-refs, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([tree config refs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1123, :end-line 1123, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tree config refs]))}, prev-props* {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 344, :column 8, :end-line 344, :end-column 19, :private true, :arglists (quote ([x y] [x y z])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}}, :private true, :name om.next/prev-props*, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z])}, replace {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 88, :column 8, :end-line 88, :end-column 15, :private true, :arglists (quote ([template new-query]))}, :private true, :name om.next/replace, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([template new-query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([template new-query]))}, computed {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 453, :column 7, :end-line 453, :end-column 15, :arglists (quote ([props computed-map])), :doc "Add computed properties to props. Note will replace any pre-existing\n   computed properties."}, :name om.next/computed, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([props computed-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props computed-map])), :doc "Add computed properties to props. Note will replace any pre-existing\n   computed properties."}, ->Indexer {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 796, :column 12, :end-line 796, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([indexes]))}, :name om.next/->Indexer, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :method-params ([indexes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 796, :end-line 796, :max-fixed-arity 1, :fn-var true, :arglists (quote ([indexes]))}, node->key {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 39, :column 8, :end-line 39, :end-column 17, :private true, :arglists (quote ([node]))}, :private true, :name om.next/node->key, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, focused-join {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 111, :column 8, :end-line 111, :end-column 20, :private true, :arglists (quote ([node ks]))}, :private true, :name om.next/focused-join, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 20, :method-params ([node ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node ks]))}, union? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 66, :column 16, :end-line 66, :end-column 22, :tag boolean, :arglists (quote ([node]))}, :name om.next/union?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :ret-tag boolean, :end-line 66, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([node]))}, get-prev-props {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 319, :column 8, :end-line 319, :end-column 22, :private true, :arglists (quote ([x]))}, :private true, :name om.next/get-prev-props, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, normalize* {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 958, :column 8, :end-line 958, :end-column 18, :private true, :arglists (quote ([query data refs]))}, :private true, :name om.next/normalize*, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([query data refs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 958, :end-line 958, :max-fixed-arity 3, :fn-var true, :arglists (quote ([query data refs]))}, props* {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 338, :column 8, :end-line 338, :end-column 14, :private true, :arglists (quote ([x y] [x y z])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}}, :private true, :name om.next/props*, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z])}, class->any {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 910, :column 7, :end-line 910, :end-column 17, :arglists (quote ([x class])), :doc "Get any component from the indexer that matches the component class."}, :name om.next/class->any, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([x class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 910, :end-line 910, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x class])), :doc "Get any component from the indexer that matches the component class."}, mounted? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 594, :column 16, :end-line 594, :end-column 24, :tag boolean, :arglists (quote ([x])), :doc "Returns true if the component is mounted."}, :name om.next/mounted?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 594, :ret-tag boolean, :end-line 594, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if the component is mounted."}, focus-query {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 117, :column 8, :end-line 117, :end-column 19, :private true, :arglists (quote ([query path]))}, :private true, :name om.next/focus-query, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :method-params ([query path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([query path]))}, -merge-pending-state! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 173, :column 4, :end-line 173, :end-column 25, :protocol om.next/ILocalState, :doc "Get the component's pending local state", :arglists (quote ([this]))}, :protocol om.next/ILocalState, :name om.next/-merge-pending-state!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Get the component's pending local state"}, default-merge-tree {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1323, :column 8, :end-line 1323, :end-column 26, :private true, :arglists (quote ([a b]))}, :private true, :name om.next/default-merge-tree, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 26, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1323, :end-line 1323, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, *reconciler* {:name om.next/*reconciler*, :file "resources/public/js/om/next.cljs", :line 27, :column 1, :end-line 27, :end-column 49, :dynamic true, :private true, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 27, :column 37, :end-line 27, :end-column 49, :dynamic true, :private true}}, merge-novelty! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1134, :column 8, :end-line 1134, :end-column 22, :private true, :arglists (quote ([reconciler state res]))}, :private true, :name om.next/merge-novelty!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([reconciler state res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1134, :end-line 1134, :max-fixed-arity 3, :fn-var true, :arglists (quote ([reconciler state res]))}, IQuery {:meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 166, :column 14, :end-line 166, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {query [[this]]}}}, :protocol-symbol true, :name om.next/IQuery, :file "resources/public/js/om/next.cljs", :end-column 20, :column 1, :line 166, :protocol-info {:methods {query [[this]]}}, :info nil, :end-line 166, :impls #{}, :doc nil, :jsdoc ("@interface")}, get-computed {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 463, :column 7, :end-line 463, :end-column 19, :arglists (quote ([x] [x k-or-ks])), :doc "Return the computed properties on a component or its props.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x k-or-ks]), :arglists ([x] [x k-or-ks]), :arglists-meta (nil nil)}}, :name om.next/get-computed, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x k-or-ks]), :arglists ([x] [x k-or-ks]), :arglists-meta (nil nil)}, :method-params ([x] [x k-or-ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x k-or-ks]), :doc "Return the computed properties on a component or its props."}, get-state {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 498, :column 7, :end-line 498, :end-column 16, :arglists (quote ([component] [component k-or-ks])), :doc "Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component k-or-ks]), :arglists ([component] [component k-or-ks]), :arglists-meta (nil nil)}}, :name om.next/get-state, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component k-or-ks]), :arglists ([component] [component k-or-ks]), :arglists-meta (nil nil)}, :method-params ([component] [component k-or-ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 498, :end-line 498, :max-fixed-arity 2, :fn-var true, :arglists ([component] [component k-or-ks]), :doc "Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state."}, *parent* {:name om.next/*parent*, :file "resources/public/js/om/next.cljs", :line 28, :column 1, :end-line 28, :end-column 45, :dynamic true, :private true, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 28, :column 37, :end-line 28, :end-column 45, :dynamic true, :private true}}, update-state! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 512, :column 7, :end-line 512, :end-column 20, :arglists (quote ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3] [component f arg0 arg1 arg2 arg3 & arg-rest])), :doc "Update a component's local state. Similar to Clojure(Script)'s update-in.", :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3]), :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3] [component f arg0 arg1 arg2 arg3 & arg-rest]), :arglists-meta (nil nil nil nil nil nil)}}, :name om.next/update-state!, :variadic true, :file "resources/public/js/om/next.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3]), :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3] [component f arg0 arg1 arg2 arg3 & arg-rest]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 512, :end-line 512, :max-fixed-arity 6, :fn-var true, :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3] [component f arg0 arg1 arg2 arg3 & arg-rest]), :doc "Update a component's local state. Similar to Clojure(Script)'s update-in."}, Indexer {:num-fields 1, :protocols #{cljs.core/IRecord om.next.protocols/IIndexer cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name om.next/Indexer, :file "resources/public/js/om/next.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 796, :record true, :end-line 796, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, query-zip {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 47, :column 8, :end-line 47, :end-column 17, :private true, :arglists (quote ([root]))}, :private true, :name om.next/query-zip, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root]))}, reconciler {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1345, :column 7, :end-line 1345, :end-column 17, :arglists (quote ([{:keys [state shared shared-fn parser indexer ui->props normalize send merge-sends remotes merge merge-tree merge-ref optimize history root-render root-unmount pathopt migrate id-key], :or {root-render (fn* [p1__20594# p2__20595#] (js/ReactDOM.render p1__20594# p2__20595#)), pathopt false, merge-sends (fn* [p1__20592# p2__20593#] (merge-with into p1__20592# p2__20593#)), remotes [:remote], migrate default-migrate, history 100, merge-ref default-merge-ref, merge default-merge, ui->props default-ui->props, indexer om.next/indexer, root-unmount (fn* [p1__20596#] (js/ReactDOM.unmountComponentAtNode p1__20596#)), merge-tree default-merge-tree, optimize (fn [cs] (sort-by depth cs))}, :as config}])), :doc "Construct a reconciler from a configuration map.\n\n   Required parameters:\n     :state        - the application state. If IAtom value is not supplied the\n                     data will be normalized into the default database format\n                     using the root query. This can be disabled by explicitly\n                     setting the optional :normalize parameter to false.\n     :parser       - the parser to be used\n\n   Optional parameters:\n     :shared       - a map of global shared properties for the component tree.\n     :shared-fn    - a function to compute global shared properties from the root props.\n                     the result is merged with :shared.\n     :send         - required only if the parser will return a non-empty value when\n                     run against the supplied :remotes. send is a function of two\n                     arguments, the map of remote expressions keyed by remote target\n                     and a callback which should be invoked with the result from each\n                     remote target. Note this means the callback can be invoked\n                     multiple times to support parallel fetching and incremental\n                     loading if desired.\n     :normalize    - whether the state should be normalized. If true it is assumed\n                     all novelty introduced into the system will also need\n                     normalization.\n     :remotes      - a vector of keywords representing remote services which can\n                     evaluate query expressions. Defaults to [:remote]\n     :root-render  - the root render function. Defaults to ReactDOM.render\n     :root-unmount - the root unmount function. Defaults to\n                     ReactDOM.unmountComponentAtNode\n     :logger       - supply a goog.log compatible logger"}, :name om.next/reconciler, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([p__20597]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1345, :end-line 1345, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [state shared shared-fn parser indexer ui->props normalize send merge-sends remotes merge merge-tree merge-ref optimize history root-render root-unmount pathopt migrate id-key], :or {root-render (fn* [p1__20594# p2__20595#] (js/ReactDOM.render p1__20594# p2__20595#)), pathopt false, merge-sends (fn* [p1__20592# p2__20593#] (merge-with into p1__20592# p2__20593#)), remotes [:remote], migrate default-migrate, history 100, merge-ref default-merge-ref, merge default-merge, ui->props default-ui->props, indexer om.next/indexer, root-unmount (fn* [p1__20596#] (js/ReactDOM.unmountComponentAtNode p1__20596#)), merge-tree default-merge-tree, optimize (fn [cs] (sort-by depth cs))}, :as config}])), :doc "Construct a reconciler from a configuration map.\n\n   Required parameters:\n     :state        - the application state. If IAtom value is not supplied the\n                     data will be normalized into the default database format\n                     using the root query. This can be disabled by explicitly\n                     setting the optional :normalize parameter to false.\n     :parser       - the parser to be used\n\n   Optional parameters:\n     :shared       - a map of global shared properties for the component tree.\n     :shared-fn    - a function to compute global shared properties from the root props.\n                     the result is merged with :shared.\n     :send         - required only if the parser will return a non-empty value when\n                     run against the supplied :remotes. send is a function of two\n                     arguments, the map of remote expressions keyed by remote target\n                     and a callback which should be invoked with the result from each\n                     remote target. Note this means the callback can be invoked\n                     multiple times to support parallel fetching and incremental\n                     loading if desired.\n     :normalize    - whether the state should be normalized. If true it is assumed\n                     all novelty introduced into the system will also need\n                     normalization.\n     :remotes      - a vector of keywords representing remote services which can\n                     evaluate query expressions. Defaults to [:remote]\n     :root-render  - the root render function. Defaults to ReactDOM.render\n     :root-unmount - the root unmount function. Defaults to\n                     ReactDOM.unmountComponentAtNode\n     :logger       - supply a goog.log compatible logger"}, *instrument* {:name om.next/*instrument*, :file "resources/public/js/om/next.cljs", :line 30, :column 1, :end-line 30, :end-column 49, :dynamic true, :private true, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 30, :column 37, :end-line 30, :end-column 49, :dynamic true, :private true}}, params {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 160, :column 4, :end-line 160, :end-column 10, :protocol om.next/IQueryParams, :doc "Return the query parameters", :arglists (quote ([this]))}, :protocol om.next/IQueryParams, :name om.next/params, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the query parameters"}, *shared* {:name om.next/*shared*, :file "resources/public/js/om/next.cljs", :line 29, :column 1, :end-line 29, :end-column 45, :dynamic true, :private true, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 29, :column 37, :end-line 29, :end-column 45, :dynamic true, :private true}}, get-indexer {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 892, :column 7, :end-line 892, :end-column 18, :arglists (quote ([reconciler])), :doc "PRIVATE: Get the indexer associated with the reconciler."}, :name om.next/get-indexer, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 892, :end-line 892, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "PRIVATE: Get the indexer associated with the reconciler."}, get-props* {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 310, :column 8, :end-line 310, :end-column 18, :private true, :arglists (quote ([x k]))}, :private true, :name om.next/get-props*, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([x k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x k]))}, focus->path {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 131, :column 8, :end-line 131, :end-column 19, :private true, :arglists (quote ([focus] [focus bound] [focus bound path])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([focus] [focus bound] [focus bound path]), :arglists ([focus] [focus bound] [focus bound path]), :arglists-meta (nil nil nil)}}, :private true, :name om.next/focus->path, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([focus] [focus bound] [focus bound path]), :arglists ([focus] [focus bound] [focus bound path]), :arglists-meta (nil nil nil)}, :method-params ([focus] [focus bound] [focus bound path]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 3, :fn-var true, :arglists ([focus] [focus bound] [focus bound path])}, get-params {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 200, :column 7, :end-line 200, :end-column 17, :arglists (quote ([component])), :doc "Return the query params for a component."}, :name om.next/get-params, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Return the query params for a component."}, bind-query {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 182, :column 8, :end-line 182, :end-column 18, :private true, :arglists (quote ([query params]))}, :private true, :name om.next/bind-query, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([query params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 2, :fn-var true, :arglists (quote ([query params]))}, compute-react-key {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 256, :column 8, :end-line 256, :end-column 25, :private true, :arglists (quote ([cl props]))}, :private true, :name om.next/compute-react-key, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 25, :method-params ([cl props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cl props]))}, set-prop! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 328, :column 8, :end-line 328, :end-column 17, :private true, :arglists (quote ([c k v])), :doc "PRIVATE: Do not use"}, :private true, :name om.next/set-prop!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([c k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c k v])), :doc "PRIVATE: Do not use"}, *raf* {:name om.next/*raf*, :file "resources/public/js/om/next.cljs", :line 26, :column 1, :end-line 26, :end-column 28, :dynamic true, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 26, :column 23, :end-line 26, :end-column 28, :dynamic true}}, IQueryParams {:meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 159, :column 14, :end-line 159, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {params [[this]]}}}, :protocol-symbol true, :name om.next/IQueryParams, :file "resources/public/js/om/next.cljs", :end-column 26, :column 1, :line 159, :protocol-info {:methods {params [[this]]}}, :info nil, :end-line 159, :impls #{default}, :doc nil, :jsdoc ("@interface")}, join-key {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 93, :column 8, :end-line 93, :end-column 16, :private true, :arglists (quote ([node]))}, :private true, :name om.next/join-key, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, state {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 301, :column 8, :end-line 301, :end-column 13, :private true, :arglists (quote ([c]))}, :private true, :name om.next/state, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, schedule-render! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 658, :column 7, :end-line 658, :end-column 23, :arglists (quote ([reconciler]))}, :name om.next/schedule-render!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 23, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 658, :end-line 658, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, react-set-state! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 547, :column 7, :end-line 547, :end-column 23, :arglists (quote ([component new-state] [component new-state cb])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([component new-state] [component new-state cb]), :arglists ([component new-state] [component new-state cb]), :arglists-meta (nil nil)}}, :name om.next/react-set-state!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([component new-state] [component new-state cb]), :arglists ([component new-state] [component new-state cb]), :arglists-meta (nil nil)}, :method-params ([component new-state] [component new-state cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 547, :end-line 547, :max-fixed-arity 3, :fn-var true, :arglists ([component new-state] [component new-state cb])}, class-path {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 623, :column 8, :end-line 623, :end-column 18, :private true, :arglists (quote ([c]))}, :private true, :name om.next/class-path, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 623, :end-line 623, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, transact! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 749, :column 7, :end-line 749, :end-column 16, :arglists (quote ([x tx] [r ref tx])), :doc "Given a reconciler or component run a transaction. tx is a parse expression\n   that should include mutations followed by any necessary read. The reads will\n   be used to trigger component re-rendering. If given a reconciler can be\n   optionally passed a ref as the second argument.\n\n   Example:\n\n     (om/transact! widget\n       '[(do/this!) (do/that!)\n         :read/this :read/that])", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x tx] [r ref tx]), :arglists ([x tx] [r ref tx]), :arglists-meta (nil nil)}}, :name om.next/transact!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x tx] [r ref tx]), :arglists ([x tx] [r ref tx]), :arglists-meta (nil nil)}, :method-params ([x tx] [r ref tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 749, :end-line 749, :max-fixed-arity 3, :fn-var true, :arglists ([x tx] [r ref tx]), :doc "Given a reconciler or component run a transaction. tx is a parse expression\n   that should include mutations followed by any necessary read. The reads will\n   be used to trigger component re-rendering. If given a reconciler can be\n   optionally passed a ref as the second argument.\n\n   Example:\n\n     (om/transact! widget\n       '[(do/this!) (do/that!)\n         :read/this :read/that])"}, schedule-sends! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 670, :column 7, :end-line 670, :end-column 22, :arglists (quote ([reconciler]))}, :name om.next/schedule-sends!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 670, :end-line 670, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, basis-t {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 655, :column 8, :end-line 655, :end-column 15, :private true, :arglists (quote ([reconciler]))}, :private true, :name om.next/basis-t, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 655, :end-line 655, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, roots {:name om.next/roots, :file "resources/public/js/om/next.cljs", :line 25, :column 1, :end-line 25, :end-column 21, :private true, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 25, :column 16, :end-line 25, :end-column 21, :private true}}, *depth* {:name om.next/*depth*, :file "resources/public/js/om/next.cljs", :line 31, :column 1, :end-line 31, :end-column 44, :dynamic true, :private true, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 31, :column 37, :end-line 31, :end-column 44, :dynamic true, :private true}}, add-root! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 676, :column 7, :end-line 676, :end-column 16, :arglists (quote ([reconciler root-class target] [reconciler root-class target options])), :doc "Given a root component class and a target root DOM node, instantiate and\n   render the root class using the reconciler's :state property. The reconciler\n   will continue to observe changes to :state and keep the target node in sync.\n   Note a reconciler may have only one root. If invoked on a reconciler with an\n   existing root, the new root will replace the old one.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reconciler root-class target] [reconciler root-class target options]), :arglists ([reconciler root-class target] [reconciler root-class target options]), :arglists-meta (nil nil)}}, :name om.next/add-root!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reconciler root-class target] [reconciler root-class target options]), :arglists ([reconciler root-class target] [reconciler root-class target options]), :arglists-meta (nil nil)}, :method-params ([reconciler root-class target] [reconciler root-class target options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 676, :end-line 676, :max-fixed-arity 4, :fn-var true, :arglists ([reconciler root-class target] [reconciler root-class target options]), :doc "Given a root component class and a target root DOM node, instantiate and\n   render the root class using the reconciler's :state property. The reconciler\n   will continue to observe changes to :state and keep the target node in sync.\n   Note a reconciler may have only one root. If invoked on a reconciler with an\n   existing root, the new root will replace the old one."}, reconciler? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1424, :column 16, :end-line 1424, :end-column 27, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is a reconciler."}, :name om.next/reconciler?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1424, :ret-tag boolean, :end-line 1424, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a reconciler."}, get-query {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 214, :column 7, :end-line 214, :end-column 16, :arglists (quote ([x])), :doc "Return a IQuery/IParams instance bound query. Works for component classes\n   and component instances. See also om.next/full-query."}, :name om.next/get-query, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return a IQuery/IParams instance bound query. Works for component classes\n   and component instances. See also om.next/full-query."}, ref->components {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 898, :column 7, :end-line 898, :end-column 22, :arglists (quote ([x ref])), :doc "Return all components for a given ref."}, :name om.next/ref->components, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([x ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 898, :end-line 898, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ref])), :doc "Return all components for a given ref."}, mock-root {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 697, :column 7, :end-line 697, :end-column 16, :arglists (quote ([reconciler root-class])), :doc "Create an Om Next root without an actual DOM target. Useful in devcards\n   testing context."}, :name om.next/mock-root, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([reconciler root-class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 697, :end-line 697, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reconciler root-class])), :doc "Create an Om Next root without an actual DOM target. Useful in devcards\n   testing context."}, ->Reconciler {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1168, :column 12, :end-line 1168, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([config state]))}, :name om.next/->Reconciler, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([config state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 1168, :end-line 1168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config state]))}, Reconciler {:num-fields 2, :protocols #{cljs.core/IRecord om.next.protocols/IReconciler cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name om.next/Reconciler, :file "resources/public/js/om/next.cljs", :end-column 22, :type true, :column 12, :internal-ctor true, :line 1168, :record true, :end-line 1168, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, OmProps {:private true, :num-fields 2, :protocols #{}, :name om.next/OmProps, :file "resources/public/js/om/next.cljs", :end-column 27, :type true, :column 20, :line 243, :record false, :end-line 243, :skip-protocol-flag nil}, transact* {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 724, :column 7, :end-line 724, :end-column 16, :arglists (quote ([r c ref tx]))}, :name om.next/transact*, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([r c ref tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 4, :fn-var true, :arglists (quote ([r c ref tx]))}, dispatch {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 788, :column 7, :end-line 788, :end-column 15, :arglists (quote ([_ key _])), :doc "Helper function for implementing :read and :mutate as multimethods. Use this\n   as the dispatch-fn."}, :name om.next/dispatch, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([_ key _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 788, :end-line 788, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ key _])), :doc "Helper function for implementing :read and :mutate as multimethods. Use this\n   as the dispatch-fn."}, app-state {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1429, :column 7, :end-line 1429, :end-column 16, :arglists (quote ([reconciler])), :doc "Return the reconciler's application state atom. Useful when the reconciler\n   was initialized via denormalized data."}, :name om.next/app-state, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1429, :end-line 1429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Return the reconciler's application state atom. Useful when the reconciler\n   was initialized via denormalized data."}, -get-state {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 171, :column 4, :end-line 171, :end-column 14, :protocol om.next/ILocalState, :doc "Get the component's local state", :arglists (quote ([this]))}, :protocol om.next/ILocalState, :name om.next/-get-state, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Get the component's local state"}, join? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 107, :column 8, :end-line 107, :end-column 13, :private true, :arglists (quote ([x]))}, :private true, :name om.next/join?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, factory {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 263, :column 7, :end-line 263, :end-column 14, :arglists (quote ([class] [class {:keys [validator keyfn], :as opts}])), :doc "Create a factory constructor from a component class created with\n   om.next/defui.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([class] [class {:keys [validator keyfn], :as opts}]), :arglists ([class] [class {:keys [validator keyfn], :as opts}]), :arglists-meta (nil nil)}}, :name om.next/factory, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([class] [class {:keys [validator keyfn], :as opts}]), :arglists ([class] [class {:keys [validator keyfn], :as opts}]), :arglists-meta (nil nil)}, :method-params ([class] [class {:keys [validator keyfn], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 2, :fn-var true, :arglists ([class] [class {:keys [validator keyfn], :as opts}]), :doc "Create a factory constructor from a component class created with\n   om.next/defui."}, -get-rendered-state {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 172, :column 4, :end-line 172, :end-column 23, :protocol om.next/ILocalState, :doc "Get the component's rendered local state", :arglists (quote ([this]))}, :protocol om.next/ILocalState, :name om.next/-get-rendered-state, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Get the component's rendered local state"}, parser {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 781, :column 7, :end-line 781, :end-column 13, :arglists (quote ([{:keys [read mutate], :as opts}])), :doc "Create a parser. The argument is a map of two keys, :read and :mutate. Both\n   functions should have the signature (Env -> Key -> Params -> ParseResult)."}, :name om.next/parser, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :method-params ([p__20262]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 781, :end-line 781, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [read mutate], :as opts}])), :doc "Create a parser. The argument is a map of two keys, :read and :mutate. Both\n   functions should have the signature (Env -> Key -> Params -> ParseResult)."}, merge-pending-state! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 537, :column 8, :end-line 537, :end-column 28, :private true, :arglists (quote ([c]))}, :private true, :name om.next/merge-pending-state!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 28, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 537, :end-line 537, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, merge-pending-props! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 366, :column 8, :end-line 366, :end-column 28, :private true, :arglists (quote ([c]))}, :private true, :name om.next/merge-pending-props!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 28, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 366, :end-line 366, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, nil-or-map? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 36, :column 16, :end-line 36, :end-column 27, :tag boolean, :arglists (quote ([x]))}, :name om.next/nil-or-map?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :ret-tag boolean, :end-line 36, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, writer {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1453, :column 7, :end-line 1453, :end-column 13, :arglists (quote ([] [opts])), :doc "Create a Om Next transit writer. This writer can handler the tempid type.\n   Can pass transit writer customization opts map.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name om.next/writer, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1453, :end-line 1453, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :doc "Create a Om Next transit writer. This writer can handler the tempid type.\n   Can pass transit writer customization opts map."}, *logger* {:name om.next/*logger*, :file "resources/public/js/om/next.cljs", :line 17, :column 1, :end-line 17, :end-column 18, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 17, :column 10, :end-line 17, :end-column 18}}, sift-refs {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1038, :column 8, :end-line 1038, :end-column 17, :private true, :arglists (quote ([res]))}, :private true, :name om.next/sift-refs, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :method-params ([res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1038, :end-line 1038, :max-fixed-arity 1, :fn-var true, :arglists (quote ([res]))}, indexer {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 884, :column 7, :end-line 884, :end-column 14, :arglists (quote ([])), :doc "Given a function (Component -> Ref), return an indexer."}, :name om.next/indexer, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 884, :end-line 884, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Given a function (Component -> Ref), return an indexer."}, subquery {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 638, :column 7, :end-line 638, :end-column 15, :arglists (quote ([x subquery-ref subquery-class])), :doc "Given a class or mounted component x and a ref to an instantiated component\n   or class that defines a subquery, pick the most specific subquery. If the\n   component is mounted subquery-ref will be used, subquery-class otherwise."}, :name om.next/subquery, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 15, :method-params ([x subquery-ref subquery-class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 638, :end-line 638, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x subquery-ref subquery-class])), :doc "Given a class or mounted component x and a ref to an instantiated component\n   or class that defines a subquery, pick the most specific subquery. If the\n   component is mounted subquery-ref will be used, subquery-class otherwise."}, reader {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1447, :column 7, :end-line 1447, :end-column 13, :arglists (quote ([] [opts])), :doc "Create a Om Next transit reader. This reader can handler the tempid type.\n   Can pass transit reader customization opts map.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name om.next/reader, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1447, :end-line 1447, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :doc "Create a Om Next transit reader. This reader can handler the tempid type.\n   Can pass transit reader customization opts map."}, component? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 294, :column 16, :end-line 294, :end-column 26, :tag boolean, :arglists (quote ([x])), :doc "Returns true if the argument is an Om component."}, :name om.next/component?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :ret-tag boolean, :end-line 294, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if the argument is an Om component."}, set-params! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 575, :column 7, :end-line 575, :end-column 18, :arglists (quote ([component new-params])), :doc "Change the query parameters of a component. Will schedule a re-render."}, :name om.next/set-params!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 18, :method-params ([component new-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 575, :end-line 575, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component new-params])), :doc "Change the query parameters of a component. Will schedule a re-render."}, remove-root! {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 691, :column 7, :end-line 691, :end-column 19, :arglists (quote ([reconciler target])), :doc "Remove a root target (a DOM element) from a reconciler. The reconciler will\n   no longer attempt to reconcile application state with the specified root."}, :name om.next/remove-root!, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :method-params ([reconciler target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 691, :end-line 691, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reconciler target])), :doc "Remove a root target (a DOM element) from a reconciler. The reconciler will\n   no longer attempt to reconcile application state with the specified root."}, ident {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 153, :column 4, :end-line 153, :end-column 9, :protocol om.next/Ident, :doc "Return the ref for this component", :arglists (quote ([this props]))}, :protocol om.next/Ident, :name om.next/ident, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 9, :method-params ([this props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this props])), :doc "Return the ref for this component"}, react-ref {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 599, :column 7, :end-line 599, :end-column 16, :arglists (quote ([component name])), :doc "Returns the component associated with a component's React ref."}, :name om.next/react-ref, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 16, :method-params ([component name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 599, :end-line 599, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component name])), :doc "Returns the component associated with a component's React ref."}, tempid {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1442, :column 7, :end-line 1442, :end-column 13, :arglists (quote ([] [id])), :doc "Return a temporary id.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [id]), :arglists ([] [id]), :arglists-meta (nil nil)}}, :name om.next/tempid, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [id]), :arglists ([] [id]), :arglists-meta (nil nil)}, :method-params ([] [id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1442, :end-line 1442, :max-fixed-arity 1, :fn-var true, :arglists ([] [id]), :doc "Return a temporary id."}, get-reconciler {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 333, :column 8, :end-line 333, :end-column 22, :private true, :arglists (quote ([c]))}, :private true, :name om.next/get-reconciler, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 22, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, map->Indexer {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 796, :column 12, :end-line 796, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__20272]))}, :name om.next/map->Indexer, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 19, :method-params ([G__20272]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 796, :end-line 796, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20272]))}, shared {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 416, :column 7, :end-line 416, :end-column 13, :arglists (quote ([component] [component k-or-ks])), :doc "Return the global shared properties of the Om Next root. See :shared and\n   :shared-fn reconciler options.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component k-or-ks]), :arglists ([component] [component k-or-ks]), :arglists-meta (nil nil)}}, :name om.next/shared, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component k-or-ks]), :arglists ([component] [component k-or-ks]), :arglists-meta (nil nil)}, :method-params ([component] [component k-or-ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 2, :fn-var true, :arglists ([component] [component k-or-ks]), :doc "Return the global shared properties of the Om Next root. See :shared and\n   :shared-fn reconciler options."}, depth {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 394, :column 8, :end-line 394, :end-column 13, :private true, :arglists (quote ([component])), :doc "PRIVATE: Returns the render depth (a integer) of the component relative to\n  the mount root."}, :private true, :name om.next/depth, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 13, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "PRIVATE: Returns the render depth (a integer) of the component relative to\n  the mount root."}, ref? {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 1044, :column 16, :end-line 1044, :end-column 20, :tag boolean, :arglists (quote ([x]))}, :name om.next/ref?, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1044, :ret-tag boolean, :end-line 1044, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, ILocalState {:meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 169, :column 14, :end-line 169, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-set-state! [[this new-state]], -get-state [[this]], -get-rendered-state [[this]], -merge-pending-state! [[this]]}}}, :protocol-symbol true, :name om.next/ILocalState, :file "resources/public/js/om/next.cljs", :end-column 25, :column 1, :line 169, :protocol-info {:methods {-set-state! [[this new-state]], -get-state [[this]], -get-rendered-state [[this]], -merge-pending-state! [[this]]}}, :info nil, :end-line 169, :impls #{}, :doc nil, :jsdoc ("@interface")}, full-query {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/resources/public/js/om/next.cljs", :line 923, :column 7, :end-line 923, :end-column 17, :arglists (quote ([component] [component path])), :doc "Returns the absolute query for a given component, not relative like\n   om.next/get-query.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component path]), :arglists ([component] [component path]), :arglists-meta (nil nil)}}, :name om.next/full-query, :variadic false, :file "resources/public/js/om/next.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component path]), :arglists ([component] [component path]), :arglists-meta (nil nil)}, :method-params ([component] [component path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 923, :end-line 923, :max-fixed-arity 2, :fn-var true, :arglists ([component] [component path]), :doc "Returns the absolute query for a given component, not relative like\n   om.next/get-query."}}, :require-macros {om.next om.next}, :cljs.analyzer/constants {:seen #{:om.next/union indexes x :remote :tempids :normalized satisfies? fn? :remove :pathopt vector? :id-key :react-key subquery-ref :read :om.next/queries :else props :merge-sends :ref :config :queue :validator :sends-queued :remotes subquery-class :migrate * map? :reconciler c' :params :history :paths string? :type :keyfn :merge-ref :state :queued-sends :prop->classes keyword? validator :component config :ref->components :om.next/tables :merge :om.next/no-queries :queued refs :class->components IQuery or :shared-fn reconciler :render :parser :keys :ui->props nil? :next :root state component :logger :indexer :root-unmount basis-t reconciler? :om-path :send :om.next/not-found :shared :merge-tree :optimize c :t tx :om.next/computed :indexes :target :root-render :query class :query/root ... :rewrite opts :class-path->query :normalize component? root-class :mutate :om.next/skip}, :order [:else :om.next/union * ... :config :state :om.next/queries :query :params :component nil? c' c props basis-t :react-key :om-path :validator :keyfn fn? class validator :ref component? component :om.next/computed :history :logger or keyword? subquery-ref string? subquery-class reconciler? reconciler root-class :shared :parser :pathopt :reconciler :remotes vector? tx satisfies? IQuery x :read :mutate map? opts :prop->classes :class-path->query :class->components :ref->components :om.next/not-found :indexes indexes :indexer :type :om.next/no-queries :om.next/tables refs :query/root :paths :rewrite :merge-ref :normalize :merge-tree :root :keys :next :tempids :merge :migrate :id-key :queue :queued-sends :merge-sends :sends-queued :send :render :om.next/skip :ui->props :optimize :queued :t :normalized :shared-fn :root-render :target :remove :root-unmount config state :remote]}, :doc nil}