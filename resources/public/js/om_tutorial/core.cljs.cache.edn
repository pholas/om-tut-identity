;; Analyzed by ClojureScript 1.7.170
{:use-macros {defui om.next}, :excludes #{}, :name om-tutorial.core, :imports nil, :requires {gdom goog.dom, goog.dom goog.dom, om om.next, om.next om.next, dom om.dom, om.dom om.dom}, :uses nil, :defs {Person {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/Person, :variadic false, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, mutate {:name om-tutorial.core/mutate, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 37, :column 1, :end-line 37, :end-column 17, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 37, :column 11, :end-line 37, :end-column 17}}, RootView {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/RootView, :variadic false, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, ListView {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/ListView, :variadic false, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, read {:name om-tutorial.core/read, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 19, :column 1, :end-line 19, :end-column 15, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 19, :column 11, :end-line 19, :end-column 15}}, person {:name om-tutorial.core/person, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 84, :column 1, :end-line 84, :end-column 12, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 84, :column 6, :end-line 84, :end-column 12}}, get-people {:protocol-inline nil, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([state key]))}, :name om-tutorial.core/get-people, :variadic false, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :end-column 17, :method-params ([state key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state key]))}, reconciler {:name om-tutorial.core/reconciler, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 111, :column 1, :end-line 111, :end-column 16, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 111, :column 6, :end-line 111, :end-column 16}}, init-data {:name om-tutorial.core/init-data, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 8, :column 1, :end-line 8, :end-column 15, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 8, :column 6, :end-line 8, :end-column 15}}, list-view {:name om-tutorial.core/list-view, :file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 94, :column 1, :end-line 94, :end-column 15, :meta {:file "/Users/jack/samples/clojure/om-tut-identity/src/om_tutorial/core.cljs", :line 94, :column 6, :end-line 94, :end-column 15}}}, :require-macros {om om.next, om.next om.next, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{points/decrement :age :read :om.next/queries :config :default :name :value :ast :keyfn :state :points points/increment :person/by-name :parser :indexer :list/two :action :query :hierarchy :mutate :list/one}, :order [:list/one :list/two :name :points :age :hierarchy :default :value :state :ast :query points/increment :action :person/by-name points/decrement :config :indexer :om.next/queries :keyfn :parser :read :mutate]}, :doc nil}